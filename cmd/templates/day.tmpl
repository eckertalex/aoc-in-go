{{define "day"}}package day{{.day}}

import (
	"strconv"

	input "github.com/eckertalex/aoc-in-go/internal/input"
)

type Solution struct{}

func New() *Solution {
	return &Solution{}
}

func (s *Solution) Part1(input *input.Input) string {
	return strconv.Itoa(0)
}

func (s *Solution) Part2(input *input.Input) string {
	return strconv.Itoa(0)
}
{{end}}

{{define "test"}}package day{{.day}}

import (
	"testing"

	input "github.com/eckertalex/aoc-in-go/internal/input"
)

func TestDay{{.day}}(t *testing.T) {
	data := ``

	solution := New()

	t.Run("Part 1", func(t *testing.T) {
		want := "-1"
		got := solution.Part1(input.FromLiteral(data))

		if want != got {
			t.Errorf("expected %q but got %q", want, got)
		}
	})

	t.Run("Part 2", func(t *testing.T) {
		want := "-1"
		got := solution.Part2(input.FromLiteral(data))

		if want != got {
			t.Errorf("expected %q but got %q", want, got)
		}
	})
}
{{end}}
